import Head from "next/head";
import React, { useState } from "react";
import useLocalStorage from "use-local-storage";
import Header from "./Header";
import { motion } from "framer-motion";
import { ArrowRightCircleIcon } from "@heroicons/react/24/outline";
import Link from "next/link";

const slides=[
  {
      ques : "How often have you had little interest or pleasure in doing things?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often have you been bothered by feeling tired or having little energy?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often have you been bothered by trouble falling or staying asleep, or sleeping too much?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often do you feel that all your hobbies and interests are boring and worthless and nothing can stimulate you?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often have you been bothered by feeling bad about yourself, or that you are a failure, or have let yourself or your family down?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "Are you afraid of forming a new relationship and feel scared of attachment?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often you have an anxiety attack (suddenly feeling fear or panic)?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often have you been bothered by feeling nervous, anxious or on edge?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often have you been bothered by feeling afraid as if something awful might happen?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
  {
      ques : "How often do you feel guilty or tearful for no reason?",
      opt : [
          "Not at all",
          "Several days",
          "More than half the days",
          "Nearly Everyday"
      ]
  },
]

const QuestionsSlide = ({ isSelected }) => {

  const [x, setX] = useLocalStorage("Mode", false);
  const toggleTheme = () => {
    setX(!x);
  };
  const [weight, setWeight] = useState(0);
  const [count, setCount] = useState(0);

  const [selectId, setSelectId] = useState();
  const [clr, setClr] = useState();

  const handleOptionClick = (selectId) => {
    setSelectId(selectId);
  };
  const handleNextButtonClick = () => {
    setSelectId(null);
    if (selectId) {
      setCount(count + 1);
      setClr(document.body);
      setSelectId(isSelected);
    }
  };

  const Option = ({
    id,
    isSelected,
    setParent,
    adding,
    weight,
    optionsValue,
  }) => {
    return (
      <>
        <div
          style={{
            backgroundColor: isSelected
              ? "rgb(74 222 128)"
              : "rgb(248 113 113)",
          }}
          className={`flex justify-between  px-4 py-2 rounded-sm `}
          onClick={() => {
            setParent(id);
            adding(weight + id);
          }}
        >
          {optionsValue}
        </div>
      </>
    );
  };

  // useEffect(() => {
  //   setSelectId(localStorage.getItem("options"));
  // }, []);

  // useEffect(() => {
  //   if (selectId) {
  //     localStorage.setItem("options", selectId);
  //   }
  // }, [selectId]);

  return (
    <div
      className={`${
        x ? "dark" : ""
      } w-full h-screen scrollbar-thin scrollbar-thumb-[#FF5A5F] scrollbar-track-gray-500 overflow-y-scroll overscroll-x-none `}
    >
      
      <Head>
        <title>Let&apos;s Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/fav.png" />
      </Head>
      <Header onDarkToggle={toggleTheme} className="" />

      <div className="flex flex-col items-center mt-3 bg-white dark:bg-gray-700">
        <motion.div
          initial={{
            y: -100,
            opacity: 0,
          }}
          animate={{
            y: 0,
            opacity: 1,
          }}
          transition={{
            duration: 1.3,
          }}
          className="py-14 text-[4.2rem] sm:text-[4.5rem] md:text-[4.8rem] lg:text-[5.5rem] font-Josefin text-[#FF5A5F]"
        >
          Let&apos;s Test
        </motion.div>
        <div className="w-[65%] h-screen">
          {" "}
          {slides[count] && (
            <div key={count && slides[count]} className=" p-10 ">
              <div className="flex space-x-2 text-lg dark:text-white font-bold ">
                <p> {count + 1}. </p>
                <h1>{slides[count] && slides[count].ques}</h1>
              </div>
              {/* <h1>ID : {selectId}</h1> */}
              <div className="space-y-3 py-2 dark:text-white">
                <Option
                  weight={weight}
                  adding={setWeight}
                  id={0}
                  isSelected={selectId == 0}
                  setParent={setSelectId}
                  optionsValue={slides[count] && slides[count].opt[0]}
                />
                <Option
                  weight={weight}
                  adding={setWeight}
                  id={1}
                  isSelected={selectId == 1}
                  setParent={setSelectId}
                  optionsValue={slides[count] && slides[count].opt[1]}
                />
                <Option
                  weight={weight}
                  adding={setWeight}
                  id={2}
                  isSelected={selectId == 2}
                  setParent={setSelectId}
                  optionsValue={slides[count] && slides[count].opt[2]}
                />
                <Option
                  weight={weight}
                  adding={setWeight}
                  id={3}
                  isSelected={selectId == 3}
                  setParent={setSelectId}
                  optionsValue={slides[count] && slides[count].opt[3]}
                />
              </div>
            </div>
          )}
          <div className="flex justify-center space-x-4 p-4">
            <button
              disabled={count === 9}
              onClick={handleNextButtonClick}
              className="bg-[#FF5A5F] rounded-lg  px-4 py-2 text-white font-bold"
            >
              Next
            </button>
            <Link
              href={{
                pathname: "/result",
                query: {
                  totalWeight: weight,
                },
              }}
              as="/result"
            >
              <button
                disabled={count !== 9}
                className="bg-[#FF5A5F] font-bold flex justify-between py-3 px-6 text-white rounded-lg shadow-sm hover:shadow-xl active:scale-90 transition duration-150 "
              >
                Submit
                <ArrowRightCircleIcon className="pl-1 h-6 items-center text-white" />
              </button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuestionsSlide;
